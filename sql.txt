SQL Statements
Inner Join 
fetch customer with their orders

SELECT c.customer_id, c.fname, c.lname, o.orderinfo_id, o.date_placed
FROM customer c, orderinfo o
WHERE c.customer_id = o.customer_id













SELECT customer.customer_id, orderinfo.orderinfo_id, customer.fname, customer.lname, customer.addressline, orderinfo.date_placed
FROM customer, orderinfo
WHERE customer.customer_id = orderinfo.customer_id

//inner Join
SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.addressline, o.date_placed
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id



SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.town, o.date_placed
FROM customer c, orderinfo o
WHERE c.customer_id = o.customer_id

//fetch all orders from customer residing in town bingham
SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.town, o.date_placed
FROM customer c, orderinfo o
WHERE c.customer_id = o.customer_id
AND (c.town = 'bingham' OR c.town = 'nicetown')




SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.town, o.date_placed
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id
WHERE c.town = 'bingham'

SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.town, o.date_placed
FROM customer c, orderinfo o
WHERE c.town = 'bingham'

SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.town, o.date_placed
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id
WHERE c.town = 'bingham' OR c.town = 'nicetown'

SELECT c.customer_id, o.orderinfo_id, c.fname, c.lname, c.town, o.date_placed
FROM customer c, orderinfo o
WHERE c.customer_id = o.customer_id
AND (c.town = 'bingham' OR c.town = 'nicetown')

SELECT c.customer_id, c.lname, o.orderinfo_id, ol.item_id, i.description, ol.quantity
FROM customer c, orderinfo o, orderline ol, item i
WHERE c.customer_id = o.customer_id
AND O.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
ORDER BY c.lname

SELECT c.customer_id, c.lname, o.orderinfo_id, ol.item_id, i.description, ol.quantity
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
ORDER BY c.lname

//fetch all orders from ann stones
SELECT c.customer_id, c.lname, c.fname, o.orderinfo_id, ol.item_id, i.description, ol.quantity
FROM customer c, orderinfo o, orderline ol, item i
WHERE c.customer_id = o.customer_id
AND O.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
AND c.fname = "ann" AND c.lname = "stones"

SELECT c.customer_id, concat(c.lname, " ", c.fname) as 'customer name', o.orderinfo_id, ol.item_id, i.description, ol.quantity
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
WHERE c.fname = "ann" AND c.lname = "stones"

what items  were ordered on march 2000
SELECT i.description, ol.quantity, o.date_placed 
FROM orderinfo o, orderline ol, item i
WHERE o.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
AND month(date_placed) = 3 AND year(date_placed) = 2000


SELECT i.description, ol.quantity, o.date_placed 
FROM orderinfo o, orderline ol, item i
WHERE o.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
AND date_placed BETWEEN '2000-03-01' AND '2000-03-31'

SELECT i.description, ol.quantity, o.date_placed 
FROM orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
WHERE date_placed BETWEEN '2000-03-01' AND '2000-03-31'


fetch all customers that bought tissue
SELECT c.customer_id, c.lname, c.fname, o.orderinfo_id, ol.item_id, i.description, ol.quantity
FROM customer c, orderinfo o, orderline ol, item i
WHERE c.customer_id = o.customer_id
AND O.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
AND i.description like '%tissue%'


SELECT c.customer_id, concat(c.lname, " ", c.fname) as 'customer name', o.orderinfo_id, ol.item_id, i.description, ol.quantity
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
WHERE i.description like '%tissue%'

fetch all customers from bingham that ordered items priced at 20 pesos or more.
SELECT c.customer_id, c.lname, c.fname, o.orderinfo_id, ol.item_id, i.description, i.sell_price, ol.quantity
FROM customer c, orderinfo o, orderline ol, item i
WHERE c.customer_id = o.customer_id
AND O.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
AND i.sell_price >= 20

fetch all customers from bingham that ordered items priced at 20 pesos or more.
SELECT c.customer_id, c.lname, c.fname, c.town, o.orderinfo_id, ol.item_id, i.description, i.sell_price, ol.quantity
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
WHERE i.sell_price >= 20
AND c.town = 'bingham'


fetch all customers with an 's' on their last name and the items they ordered

SELECT c.customer_id, c.lname, c.fname, o.orderinfo_id, ol.item_id, i.description, i.sell_price, ol.quantity
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
AND c.lname LIKE "%s%"
ORDER BY c.lname DESC

SELECT c.customer_id, c.lname, c.fname, o.orderinfo_id, ol.item_id, i.description, i.sell_price, ol.quantity
FROM customer c, orderinfo o, orderline ol, item i
WHERE c.customer_id = o.customer_id
AND O.orderinfo_id = ol.orderinfo_id
AND ol.item_id = i.item_id
AND c.lname LIKE "%s%"
ORDER BY c.lname DESC

INSERT 

INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('mr', 'mustaine', 'dave', 'blc', 'taguig', '4196', '838-9889')

INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('mr', 'santos', 'jenniy', 'champaca', 'taguig', '4196', '838-9889')

INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('mr', 'kirk', 'hammett', 'washington', 'taguig', '4196', NULL)

INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('mr', 'kirk', NULL , 'washington', 'taguig', '4196','')

INSERT INTO item (description, cost_price, sell_price) VALUES ('43 monitor', 800, 1000)

INSERT INTO item (description, cost_price, sell_price) VALUES ('hdmi', 800, 1000), ('nike air', 700, 1000), ('guitar', 80, 100), ('speaker', 98, 98.90) 

INSERT INTO stock (item_id, quantity) VALUES(27, 90), (28, 90),(29, 100) 

INSERT INTO item (item_id,description, cost_price, sell_price) VALUES (28, 'wireless mouse', 800, 890);
INSERT INTO stock(item_id, quantity) VALUES (last_insert_id(), 100);

INSERT INTO orderinfo (customer_id, date_placed, date_shipped, shipping) VALUES (33, now(), now(), 100)

INSERT INTO orderinfo (customer_id, date_placed, date_shipped, shipping) VALUES (333, now(), date_add(now(), INTERVAL 7 DAY), 100)

INSERT INTO orderline (orderinfo_id, item_id, quantity)
VALUE(last_insert_id(), 28, 10), (last_insert_id(), 29,3), (last_insert_id(), 30, 10) 

UPDATE customer SET lname = 'land', phone = '889-99-99' 
WHERE customer_id = 36

//do not do this
UPDATE customer SET town = 'alabang'

UPDATE item SET sell_price = sell_price + 10 where item_id = 30

DELETE FROM item where item_id = 21;
DELETE FROM item where item_id IN (28, 29, 30)

#cust.txt
Miss,Emma,Neill,21 Sheepy Lane,Hightown,NT2 1YQ,023 4245
Mr,Gavin,Neill,21 Sheepy Lane,Hightown,NT2 1YQ,023 4245
Mr,Duncan,Neill,21 Sheepy Lane,Hightown,NT2 1YQ,023 4245

LOAD DATA LOCAL INFILE 'd:/itim130-2024/cust.txt' INTO TABLE customer FIELDS TERMINATED BY ',' (title, fname, lname, addressline, town, zipcode,phone);

CREATE table tcust( 
    title char(4),
	fname varchar(32),
	lname varchar(32),
	addressline varchar(64),
	town varchar(32),
	zipcode char(10),
	phone varchar(16)
)

#mysqlimport
mysqlimport  –-local –-password --user=root --columns=title,fname,lname,addressline,town,zipcode,phone --fields-terminated-by=, db_sales_2024  d:/itim130-2024/tcust.csv 

INSERT INTO customer(title, fname,lname, addressline, town, zipcode, phone ) SELECT title, fname, lname, addressline,town,zipcode, phone FROM tcust WHERE phone != '';


CREATE TABLE testtype ( 
    singlechar CHAR,
	fixedchar CHAR(13),
	vchar VARCHAR(128),
	vcharb VARCHAR(128) BINARY,
	mtext MEDIUMTEXT
)

INSERT INTO testtype VALUES ('F', '0-349-10177-9',
'The Wasp Factory', 'The Wasp Factory',
'The extraordinary world of Frank, a very unconventional sixteen year old. A stunning masterpiece by IAIN Banks.');

INSERT INTO testtype VALUES ('F','1-85723-457-X','Excession', 'Excession', 'A bests selling SF book showing extraordinary imagination');

INSERT INTO testtype VALUES (NULL,'', 'some spaces      ', '',
'Bound to be exceptional.');

SELECT fixedchar, mtext from testtype \G
SELECT fixedchar,vchar,vcharb FROM testtype WHERE vchar = 'EXCESSION'\G
SELECT fixedchar,vchar,charb FROM testtype WHERE vcharb='EXCESSION'\G
SELECT fixedchar,vchar,charb FROM testtype WHERE singlechar IS NULL\G 

CREATE TEMPORARY TABLE numType (
    asmallint SMALLINT,
    anint INT,
    ausint INT UNSIGNED,
    afloat FLOAT(2),
    anumeric NUMERIC(5,2)
    );

INSERT INTO testype VALUES (2,2,2,2.0,2.0);
INSERT INTO testtype VALUES (-100,-100.00,-100,123.456789, 123.456789);
INSERT INTO testtype VALUES (300,300,300,123456789,123456789);
INSERT INTO testtype VALUES (100000,100000,100000,-123456789,-123456789);


Select strcmp('foo, 'foo');
Select strcmp('foo', 'FOO');
Select strcmp('foo', binary 'FOO');
Select strcmp('foo', 'bar');
Select ceiling(2,2), floor(2,4),round(2,2)
Select description, MID(description,2,6), 
UPPER(description) 
FROM item where item_id = 6;

Select ASCII('A'),
Char(65,66,67),
Concat('hello',0x20,0x57, 'orld');
Create table testcolcons (
Colnotnull INT NOT NULL,
Colprikey INT NOT NULL PRIMARY KEY,
Coldefault INT DEFAULT 42);

INSERT INTO testcolcons(colnotnull, colprikey,coldefault)
	values(1,1,1);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault)
	values(2,2,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault)
	values(NULL,3,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault)
	values(3,2,NULL);
INSERT INTO testcolcons(colnotnull, colprikey,coldefault)
	values(3,3);

Create table ttconst (
    mykey1 INT,
    mykey2 INT NOT NULL,
    mystring varchar(15) NOT NULL,
    CONSTRAINT cs1 UNIQUE(mykey1),
    CONSTRAINT cs2 PRIMARY KEY (mykey2,mystring)
    );


Insert into ttconst values(1,2, 'Amy Jones');
Insert into ttconst values(1,2, 'Dave jones');
Insert into ttconst values(2,2, 'Dave jones');
Insert into ttconst values(3,2, 'Amy Jones');

CREATE TABLE c1 select fname,lname,zipcode FROM customer
	WHERE (town='bingham') OR (town = 'Nicetown');
ALTER TABLE c1 ADD COLUMN last_contact date AFTER zipcode;

ALTER TABLE c1 CHANGE COLUMN zipcode zipcode2 char(15);

ALTER TABLE c1 CHANGE COLUMN fname fname char(32) NOT NULL ;

ALTER TABLE c2 ADD PRIMARY KEY (fname,lname);

SELECT COUNT(*) AS total FROM customer WHERE town='Bingham';


SELECT COUNT(*), town FROM customer GROUP BY town;

SELECT COUNT(*), count(*),lname,  town FROM customer GROUP BY town, lname;

SELECT COUNT(*) AS total, town FROM customer GROUP BY town
HAVING total > 1;



SELECT COUNT(*), lname, town 
FROM customer 
WHERE town <> 'tenement'
GROUP BY lname, town
HAVING COUNT(*) > 1
how many orders were placed for each month
SELECT count(orderinfo_id) AS 'total orders', monthname(date_placed)
FROM orderinfo
GROUP BY month(date_placed)
how many orders were made for the month of may 2024



SELECT count(*) as 'total orders per month', monthname(date_placed)
FROM orderinfo
WHERE month(date_placed) = 5
GROUP BY month(date_placed);

count orders per month with total number of orders greater than 1
SELECT count(*) as 'total orders per month', monthname(date_placed)
FROM orderinfo
GROUP BY month(date_placed)
HAVING count(*) > 2;

how many items have cost price is greater than 10
SELECT COUNT(*) AS 'items cost' from item where cost_price > 10;
how many items were sold
SELECT SUM(quantity) as 'total items sold' FROM orderline;

get the total units sold for each item

SELECT ol.item_id, i.description, sum(quantity)
FROM orderline ol INNER JOIN item i ON ol.item_id = i.item_id 
GROUP BY item_id;







SELECT i.item_id, i.description, SUM(quantity) as 'total units sold' 
FROM orderline ol INNER JOIN item i ON i.item_id = ol.item_id 
GROUP BY i.item_id
ORDER BY SUM(quantity) DESC

SELECT  i.description, SUM(quantity) as 'total units sold' 
FROM orderline ol INNER JOIN item i ON i.item_id = ol.item_id 
GROUP BY i.description
ORDER BY SUM(quantity) DESC


total number of items sold this may 2024
select monthname(date_placed), sum(ol.quantity)
from orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id
where date_placed BETWEEN '2024-05-01' AND '2024-05-31'




SELECT  monthname(date_placed), sum(quantity) AS 'total items sold'
FROM orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id 
WHERE date_placed BETWEEN  '2024-05-01' AND '2024-05-31'

total units sold for each item for the month of may
SELECT  i.description, sum(quantity), monthname(o.date_placed) AS 'total items sold'
FROM orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON ol.item_id = i.item_id
WHERE date_placed BETWEEN  '2024-05-01' AND '2024-05-31'
GROUP BY ol.item_id





SELECT  ol.item_id, i.description, monthname(o.date_placed), sum(quantity) AS 'total items sold'
FROM orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON i.item_id = ol.item_id
WHERE o.date_placed BETWEEN  '2024-05-01' AND '2024-05-31'
GROUP BY ol.item_id
HAVING sum(quantity) > 1

what is the total amount to be paid for order number 2
1 1 * 3000
4 2 * 4000
7 2 * 2.49
10 1 15.75

SELECT o.orderinfo_id, concat(c.lname, " ", c.fname),o.date_placed, sum(ol.quantity * i.sell_price)
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON i.item_id = ol.item_id
WHERE o.orderinfo_id = 2


select 4000 + 2.49 + 9.95

select o.orderinfo_id,   sum(ol.quantity * i.sell_price) AS total
FROM orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id INNER JOIN item i ON i.item_id = ol.item_id
WHERE o.orderinfo_id = 1;

what is the total profit of the shop
select sum(ol.quantity * i.sell_price) AS `total sales`
FROM orderline ol INNER JOIN item i ON i.item_id = ol.item_id

how many items were sold for each month
SELECT sum(ol.quantity), monthname(date_placed)
FROM orderinfo o INNER JOIN  orderline ol ON o.orderinfo_id = ol.orderinfo_id
GROUP BY month(date_placed)

how many customers that bought tissue

SELECT count(c.customer_id), i.description
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id 
INNER JOIN item i ON i.item_id = ol.item_id
WHERE i.description LIKE '%tissue%'

get the total profit for each month of 2024
SELECT MONTHNAME(o.date_placed), sum(ol.quantity * i.sell_price)
FROM  orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id 
INNER JOIN item i ON i.item_id = ol.item_id
WHERE YEAR(date_placed) = 2024
GROUP BY MONTH(o.date_placed)

get the profit for each item
SELECT i.description, sum(ol.quantity * i.sell_price) as 'total'
FROM  orderinfo o INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id 
INNER JOIN item i ON i.item_id = ol.item_id
GROUP BY i.description
ORDER BY total DESC

HOW much did our customers spent on our shop
SELECT c.customer_id, concat(c.fname, " ", c.lname), sum(ol.quantity * i.sell_price) AS 'total' 
FROM customer c INNER JOIN orderinfo o ON c.customer_id = o.customer_id 
INNER JOIN orderline ol ON o.orderinfo_id = ol.orderinfo_id 
INNER JOIN item i ON i.item_id = ol.item_id
WHERE c.customer_id = 3
GROUP BY c.customer_id


ORDER BY total DESC

LEFT OUTER JOIN
select i.item_id, i.description, s.quantity, i.cost_price
from item i LEFT OUTER JOIN stock s ON i.item_id = s.item_id AND s.quantity > 10

fetch all customers with or without orders
select c.customer_id, c.fname, o.date_placed
FROM customer c LEFT OUTER JOIN orderinfo o ON c.customer_id = o.customer_id

Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;Database=db_sales_2024;User=root;Password=;")
    Public dbconn As New MySqlConnection
    Public sql As String
    Public dbcomm As MySqlCommand
    Public dbread As MySqlDataReader
    Public DataAdapter1 As MySqlDataAdapter
    Public ds As DataSet
	//button
Dim customer_id As Integer
        Try
            conn.Open()
            customer_id = Val(TextBox1.Text)
            sql = "SELECT * FROM customer WHERE customer_id = " & customer_id
			dbcomm = New MySqlCommand(sql, conn)
            dbread = dbcomm.ExecuteReader()
			dbread.Read()
            TextBox2.Text = dbread("customer_id")
            TextBox3.Text = dbread("title")
            TextBox4.Text = dbread("lname")
        Catch ex As Exception
            conn.Close()
        End Try

Dim title = TextBox2.Text
        Dim firstName = TextBox3.Text
        Dim lastName = TextBox4.Text
        Dim address = TextBox5.Text
        Dim town = TextBox6.Text
        Dim zip = TextBox7.Text
        Dim phone = TextBox8.Text
        Try
            conn.Open()
            sql = "INSERT INTO customer (title, fname, lname, addressline, town, zipcode, phone) VALUES ('" & title & "','" & firstName & "','" & lastName & "','" & address & "','" & town & "','" & zip & "','" & phone & "')"
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record saved")
            Else
                MsgBox("record not saved")

            End If
        Catch ex As MySqlException
            MsgBox("customer not created")
        End Try
        Label1.Text = sql
        conn.Close()

Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Dim customerId = Val(TextBox1.Text)
        Dim title = TextBox2.Text
        Dim firstName = TextBox3.Text
        Dim lastName = TextBox4.Text
        Dim address = TextBox5.Text
        Dim town = TextBox6.Text
        Dim zip = TextBox7.Text
        Dim phone = TextBox8.Text
        Try
            conn.Open()
            sql = $"UPDATE customer SET title = '{title}', lname = '{lastName}', fname = '{firstName}', addressline = '{address}', town = '{town}', zipcode = '{zip}', phone= '{phone}' WHERE customer_id = {customerId}"
            Label1.Text = sql
            dbcomm = New MySqlCommand(sql, conn)
            Dim i As Integer = dbcomm.ExecuteNonQuery

            If (i > 0) Then
                MsgBox("record updated")
            Else
                MsgBox("record not saved")

            End If

        Catch ex As Exception

        End Try
        conn.Close()

    End Sub

Private Sub Button4_Click(sender As Object, e As EventArgs) Handles Button4.Click
        Try
            conn.Open()
            Dim id As Integer = InputBox("enter customer id to be deleted", "delete record")
            Dim ans = MessageBox.Show("do you want to delete this record?", "record deleted", MessageBoxButtons.YesNoCancel)
            If ans = DialogResult.Yes Then
                sql = $"DELETE FROM customer WHERE customer_id = {id}"
                dbcomm = New MySqlCommand(sql, conn)
                Dim i As Integer = dbcomm.ExecuteNonQuery

                If (i > 0) Then
                    MsgBox("record deleted")
                Else
                    MsgBox("record not deleted")

                End If
            End If
        Catch ex As MySqlException
            MsgBox(ex.Message)
        End Try
    End Sub
form load
	Try
            conn.Open()
            sql = "select * from customer"
            dbcomm = New MySqlCommand(sql, conn)
            DataAdapter1 = New MySqlDataAdapter(sql, conn)
            ds = New DataSet()
            DataAdapter1.Fill(ds, "customer1")
            DataGridView1.DataSource = ds
            DataGridView1.DataMember = "customer1"
            DataGridView1.Update()
            DataGridView1.Refresh()

        Catch ex As Exception
            MsgBox("Error in collecting data from Database. Error is :" & ex.Message)

        End Try
     
        conn.Close()


